・プログラムの説明

ラベルmain内において、
1行目でレジスタ$t0に即値10をロード
次にラベルloopに入る。
loop内では、
1行目でレジスタ$a0にレジスタ$t0の保持するアドレスを格納する。
2行目でsyscallでint型を表示する為にレジスタ$v0に即値１を格納する。
3行目でレジスタ$a0の保持する値を表示する。
4行目でfactorialが示すアドレスをレジスタ$a0に格納する。
5行目でsyscallでstring型を表示する為にレジスタ$v0に即値４を格納する。
6行目で文字列" != "を表示する。
7行目でレジスタ$a0にレジスタ$t0のアドレスを格納する。
8行目でスタックに場所を作る。
9行目でレジスタ$t0を格納する。
10行目でレジスタ$raを格納する。
11行目でラベル fact へ

先にfact内の説明に移る。
fact内では、
1行目でレジスタ$t0にレジスタ$a0の保持するアドレスを格納する。
2行目でレジスタ$t0の保持する値が０でなければラベルrefactへ
3行目でレジスタ$v0に即値１をロード
4行目で呼び出し側に戻る

続いてrefat内の説明に移る。
refact内では、
1行目ではレジスタ$a0にレジスタ$t0から１引いたものを格納する。
2行目でスタックに場所を作る。
3行目でレジスタ$t0を格納する。
4行目でレジスタ$raを格納する。
5行目でラベル fact へ
6行目でレジスタ$raを復活させる
7行目でレジスタ$t0を復活させる
8行目でレジスタ$spを復活させる
9行目でレジスタ$t0とレジスタ$v0の乗算を行う。
10行目で乗算の結果をレジスタ$v0に格納する。
11行目で呼び出し側に戻る。

ここでmain内の説明に戻る。
12行目でレジスタ$raを復活させる
13行目でレジスタ$t0を復活させる
14行目でレジスタ$spを復活させる
15行目でレジスタ$v0の保持するアドレスをレジスタ$a0に格納する。
16行目でsyscallでint型を表示する為にレジスタ$v0に即値1を格納する。
17行目でレジスタ$a0の保持する値が表示される。
18行目でstrが指すアドレスをレジスタ$a0に格納する。
19行目でsyscallでstring型を表示する為にレジスタ$v0に即値４を格納する。
20行目で改行処理が行われる。
21行目でレジスタ$t0から１引いたものをレジスタ$t0に格納する。
22行目でレジスタ$t0の保持する値が０より大きいか等しいならばラベルloopへ戻る
23行目で呼び出し側に戻り終了である。
